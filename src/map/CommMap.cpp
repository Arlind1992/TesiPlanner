/*
 * CommMap.cpp
 *
 *  Created on: Dec 29, 2016
 *      Author: arlind
 */

#include <map/CommMap.h>
#include <cmath>
#include "xml/xmlParser.h"



CommMap::~CommMap() {
	// TODO Autogenerated destructor stub
}
bool CommMap::getSpeed(int x,int y,int* speed){
	*speed=(*repMatrix)(x,y);
	if(*speed==0){
		return false;
	}else{
		return true;
	}
}
void CommMap::setSpeed(int xCenter,int yCenter,int speed,bool discreteCase){
	int starti,startj,endi,endj;
		int maxRad=20;

			if(xCenter-maxRad<0){
					starti=0;
				}else{
					starti=xCenter-maxRad;
				}
				if(yCenter-maxRad<0){
						startj=0;
					}else{
						startj=yCenter-maxRad;
				}
				if(xCenter+maxRad>=this->repMatrix->rows()){
						endi=this->repMatrix->rows()-1;
					}else{
						endi=xCenter+maxRad;
				}
				if(yCenter+maxRad>=this->repMatrix->cols()){
						endj=this->repMatrix->cols()-1;
					}else{
						endj=yCenter+maxRad;
				}


			for(int i = starti; i <= endi; i++)
			    for(int j = startj; j <= endj; j++)
			    {
			    	double xDist=(i-xCenter)*(i-xCenter);
			    	double yDist=(j-yCenter)*(j-yCenter);
			    	int distance=ceil(sqrt(xDist+yDist));
			    	if(i==xCenter&&j==yCenter){
			    		(*repMatrix)(i,j)=speed;
			    		continue;
			    	}
			    	if(distance<=3){
			    		(*repMatrix)(i,j)=speed;
			    		continue;
			    	}

			    	if(discreteCase){
			    	int speedForCell=speed-(((int)distance-4)+1)*2;
			    	if(speedForCell>0){
			    	(*repMatrix)(i,j)=speedForCell;
			    	}
			    	}else{
			    		int speedForCell=speed-((((int)distance-4)/4)+1)*8;
			    		if(speedForCell>0){
			    				    	(*repMatrix)(i,j)=speedForCell;
			    				    	}
			    	}
			    }

}
void CommMap::setMatrix(std::vector<xml::antenna> antenne,int discrete){
	bool caset;
	if(discrete==2){
		caset=true;
	}else{
		caset=false;
	}
	for(xml::antenna a:antenne){
		setSpeed(a.first.first,a.first.second,a.second,caset);
	}
}












